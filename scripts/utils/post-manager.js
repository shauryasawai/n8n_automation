const fs = require('fs');
const path = require('path');
require('dotenv').config();

class PostManager {
  constructor() {
    this.postsDir = process.env.POSTS_OUTPUT_DIR || path.join(process.cwd(), 'generated-posts');
    this.ensureDirectoryExists();
  }

  ensureDirectoryExists() {
    if (!fs.existsSync(this.postsDir)) {
      fs.mkdirSync(this.postsDir, { recursive: true });
      console.log(`üìÅ Created posts directory: ${this.postsDir}`);
    }
  }

  /**
   * List all saved posts
   */
  listPosts() {
    try {
      const files = fs.readdirSync(this.postsDir)
        .filter(file => file.endsWith('.md') && file.startsWith('drone-'))
        .map(file => {
          const filepath = path.join(this.postsDir, file);
          const stats = fs.statSync(filepath);
          return {
            filename: file,
            created: stats.ctime,
            size: stats.size,
            filepath: filepath
          };
        })
        .sort((a, b) => b.created - a.created);

      console.log(`\nüìã Found ${files.length} saved posts:\n`);
      
      files.forEach((file, index) => {
        console.log(`${index + 1}. ${file.filename}`);
        console.log(`   üìÖ Created: ${file.created.toLocaleString()}`);
        console.log(`   üìè Size: ${Math.round(file.size / 1024 * 100) / 100} KB`);
        console.log('');
      });

      return files;
    } catch (error) {
      console.error('‚ùå Error listing posts:', error.message);
      return [];
    }
  }

  /**
   * Show latest post content
   */
  showLatest() {
    const posts = this.listPosts();
    if (posts.length === 0) {
      console.log('üì≠ No posts found');
      return;
    }

    const latest = posts[0];
    console.log(`\nüìÑ Latest Post: ${latest.filename}\n`);
    
    try {
      const content = fs.readFileSync(latest.filepath, 'utf8');
      console.log(content);
    } catch (error) {
      console.error('‚ùå Error reading latest post:', error.message);
    }
  }

  /**
   * Create daily summary
   */
  createDailySummary() {
    const today = new Date().toISOString().split('T')[0];
    const posts = this.listPosts();
    const todaysPosts = posts.filter(post => 
      post.created.toISOString().startsWith(today)
    );

    const summaryContent = `# Daily Drone News Summary - ${today}

**Generated:** ${new Date().toLocaleString()}
**Total Posts Today:** ${todaysPosts.length}
**All Time Posts:** ${posts.length}

## Today's Generated Content

${todaysPosts.length > 0 ? 
  todaysPosts.map((post, index) => `
### ${index + 1}. ${post.filename}
- **Created:** ${post.created.toLocaleTimeString()}
- **Size:** ${Math.round(post.size / 1024 * 100) / 100} KB
- **File:** [${post.filename}](./${post.filename})
`).join('\n') : 
  'üì≠ No posts generated today'
}

## Statistics

- **Posts This Week:** ${posts.filter(p => (Date.now() - p.created.getTime()) < 7 * 24 * 60 * 60 * 1000).length}
- **Posts This Month:** ${posts.filter(p => p.created.getMonth() === new Date().getMonth()).length}
- **Total Posts:** ${posts.length}

## Quick Actions

- üîÑ Generate new posts: http://localhost:5678
- üìÇ Open posts folder: ${this.postsDir}
- üìä View all posts: Run \`node scripts/utils/post-manager.js list\`

---
*Summary generated by Post Manager Utility*
`;

    const summaryFile = path.join(this.postsDir, `daily-summary-${today}.md`);
    try {
      fs.writeFileSync(summaryFile, summaryContent, 'utf8');
      console.log(`‚úÖ Daily summary created: daily-summary-${today}.md`);
      return summaryFile;
    } catch (error) {
      console.error('‚ùå Error creating daily summary:', error.message);
      return null;
    }
  }

  /**
   * Clean old posts (older than specified days)
   */
  cleanOldPosts(daysOld = 30) {
    const cutoffDate = new Date(Date.now() - daysOld * 24 * 60 * 60 * 1000);
    const posts = this.listPosts();
    const oldPosts = posts.filter(post => post.created < cutoffDate);

    if (oldPosts.length === 0) {
      console.log(`‚úÖ No posts older than ${daysOld} days found`);
      return;
    }

    console.log(`\nüóëÔ∏è  Found ${oldPosts.length} posts older than ${daysOld} days:`);
    oldPosts.forEach(post => {
      console.log(`   - ${post.filename} (${post.created.toLocaleDateString()})`);
    });

    // Create backup before deletion
    const backupDir = path.join(this.postsDir, 'archived');
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }

    oldPosts.forEach(post => {
      try {
        const backupPath = path.join(backupDir, post.filename);
        fs.copyFileSync(post.filepath, backupPath);
        fs.unlinkSync(post.filepath);
        console.log(`‚úÖ Archived: ${post.filename}`);
      } catch (error) {
        console.error(`‚ùå Error archiving ${post.filename}:`, error.message);
      }
    });

    console.log(`\nüì¶ ${oldPosts.length} posts archived to: ${backupDir}`);
  }

  /**
   * Convert posts to different formats
   */
  exportToFormat(format = 'html') {
    const posts = this.listPosts();
    if (posts.length === 0) {
      console.log('üì≠ No posts to export');
      return;
    }

    const exportDir = path.join(this.postsDir, 'exports', format);
    if (!fs.existsSync(exportDir)) {
      fs.mkdirSync(exportDir, { recursive: true });
    }

    posts.forEach(post => {
      try {
        const content = fs.readFileSync(post.filepath, 'utf8');
        let convertedContent;
        let extension;

        switch (format.toLowerCase()) {
          case 'html':
            convertedContent = this.markdownToHtml(content);
            extension = '.html';
            break;
          case 'txt':
            convertedContent = this.markdownToText(content);
            extension = '.txt';
            break;
          case 'json':
            convertedContent = JSON.stringify(this.markdownToJson(content, post), null, 2);
            extension = '.json';
            break;
          default:
            console.log(`‚ùå Unsupported format: ${format}`);
            return;
        }

        const exportPath = path.join(exportDir, post.filename.replace('.md', extension));
        fs.writeFileSync(exportPath, convertedContent, 'utf8');
        
      } catch (error) {
        console.error(`‚ùå Error exporting ${post.filename}:`, error.message);
      }
    });

    console.log(`‚úÖ Exported ${posts.length} posts to ${format.toUpperCase()} format`);
    console.log(`üìÇ Location: ${exportDir}`);
  }

  markdownToHtml(markdown) {
    return markdown
      .replace(/^# (.*$)/gm, '<h1>$1</h1>')
      .replace(/^## (.*$)/gm, '<h2>$1</h2>')
      .replace(/^### (.*$)/gm, '<h3>$1</h3>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/\n/g, '<br>\n');
  }

  markdownToText(markdown) {
    return markdown
      .replace(/^#+ /gm, '')
      .replace(/\*\*(.*?)\*\*/g, '$1')
      .replace(/\*(.*?)\*/g, '$1')
      .replace(/---/g, '---');
  }

  markdownToJson(markdown, fileInfo) {
    const sections = markdown.split('---');
    return {
      filename: fileInfo.filename,
      created: fileInfo.created,
      title: sections[0]?.replace(/^# /, '').trim(),
      content: sections[1]?.trim(),
      metadata: sections[2]?.trim(),
      rawMarkdown: markdown
    };
  }
}

// Command line interface
function main() {
  const args = process.argv.slice(2);
  const command = args[0] || 'list';
  const manager = new PostManager();

  switch (command.toLowerCase()) {
    case 'list':
      manager.listPosts();
      break;
    
    case 'latest':
      manager.showLatest();
      break;
    
    case 'summary':
      manager.createDailySummary();
      break;
    
    case 'clean':
      const days = parseInt(args[1]) || 30;
      manager.cleanOldPosts(days);
      break;
    
    case 'export':
      const format = args[1] || 'html';
      manager.exportToFormat(format);
      break;
    
    case 'help':
    default:
      console.log(`
üìã Post Manager - Available Commands:

  list          Show all saved posts
  latest        Show the latest post content
  summary       Create daily summary
  clean [days]  Archive posts older than X days (default: 30)
  export [fmt]  Export posts to format (html, txt, json)
  help          Show this help

Examples:
  node scripts/utils/post-manager.js list
  node scripts/utils/post-manager.js latest
  node scripts/utils/post-manager.js clean 7
  node scripts/utils/post-manager.js export html
      `);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = PostManager;